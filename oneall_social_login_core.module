<?php
/**
 * @package   	OneAll Social Login Core
 * @copyright 	Copyright 2012 http://www.oneall.com - All rights reserved.
 * @license   	GNU/GPL 2 or later
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307,USA.
 *
 * The "GNU General Public License" (GPL) is available at
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 *
 */

/**
 * @file
 * Contains the core functions used by the OneAll Social Login Module
 */

/**
 * Setup the callback handler uri
 */
function oneall_social_login_core_menu() {

  //Setup callback handler
  $items ['oneall_social_login/callback'] = array(
    'title' => 'OneAll Social Login Callback',
    'page callback' => 'oneall_social_login_core_callback_handler',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'oneall_social_login_core.module',
  );

  //Done
  return $items;
}

/**
 * Callback handler
 */
function oneall_social_login_core_callback_handler() {
  //Read Settings
  $settings = oneall_social_login_core_get_settings();

  //No need to do anything if we haven't received these arguments
  if (isset($_POST) AND !empty($_POST ['connection_token']) AND !empty($_POST ['oa_action']) AND in_array($_POST ['oa_action'], array(
    'social_login',
    'social_link'
  ))) {
    //Clear session
    oneall_social_login_core_clear_session();

    //API Settings
    $api_subdomain = (!empty($settings ['api_subdomain']) ? trim(drupal_strtolower($settings ['api_subdomain'])) : '');
    $api_key = (!empty($settings ['api_key']) ? trim($settings ['api_key']) : '');
    $api_secret = (!empty($settings ['api_secret']) ? trim($settings ['api_secret']) : '');

    //Settings missing
    if (empty($api_subdomain) OR empty($api_key) OR empty($api_secret)) {
      drupal_set_message(t('OneAll Social Login is not setup correctly, please request the administrator to verify the API Settings'), 'error');
      watchdog('oneall_social_login_core', 'The API Settings are not filled out correctly', WATCHDOG_ERROR);
    }
    //Settings filled out
    else {
      $curl = curl_init();
      curl_setopt($curl, CURLOPT_URL, 'https://' . $api_subdomain . '.api.oneall.com/connections/' . $_POST ['connection_token'] . '.json');
      curl_setopt($curl, CURLOPT_HEADER, 0);
      curl_setopt($curl, CURLOPT_USERPWD, $api_key . ":" . $api_secret);
      curl_setopt($curl, CURLOPT_TIMEOUT, 15);
      curl_setopt($curl, CURLOPT_VERBOSE, 0);
      curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);
      curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, 0);
      curl_setopt($curl, CURLOPT_FAILONERROR, 0);

      if (($json = curl_exec($curl)) !== FALSE) {
        curl_close($curl);
        $social_data = json_decode($json);

        //Everything seems to be ok
        if (is_object($social_data) AND @intval($social_data ->response ->request ->status ->code) == 200) {
          //Used plugin
          $data = $social_data ->response ->result ->data;

          //Save the social network data in a session
          $_SESSION ['oneall_social_login_session_open'] = 1;
          $_SESSION ['oneall_social_login_session_time'] = time();
          $_SESSION ['oneall_social_login_social_data'] = serialize($social_data);

          //Unique user_token
          $user_token = $social_data ->response ->result ->data ->user ->user_token;

          //Unique identity_token
          $identity_token = $social_data ->response ->result ->data ->user ->identity ->identity_token;

          //Social Network used to connect
          $provider_name = (!empty($social_data ->response ->result ->data ->user ->identity ->source ->name) ? $social_data ->response ->result ->data ->user ->identity ->source ->name : t('Unkown'));

          //Try restoring the user for the token
          $user_for_token = oneall_social_login_core_get_user_for_user_token($user_token);

          //Existing user
          if (is_object($user_for_token) AND !empty($user_for_token ->uid)) {
            //Login
            if ($data ->plugin ->key == 'social_login') {
              // Check that the user has not been blocked.
              $state ['values'] ['name'] = $user_for_token ->name;
              user_login_name_validate(array(), $state);
              if (!form_get_errors()) {
                // Login user
                $form_state ['uid'] = $user_for_token ->uid;
                user_login_submit(array(), $form_state);
              }
            }
            //Link
            elseif ($data ->plugin ->key == 'social_link') {
              //Should be logged in
              global $user;

              //User is logged in
              if (is_object($user) AND !empty($user ->uid)) {
                //The existing token does not match the current user
                if ($user_for_token ->uid <> $user ->uid) {
                  drupal_set_message(t('This @social_network account is linked to another user.', array(
                    '@social_network account' => $data ->user ->identity ->source ->name
                  )), 'error');
                }
                //The existing token matches the current user
                else {
                  //Link identity
                  if ($data ->plugin ->data ->action == 'link_identity') {
                    oneall_social_login_core_map_identity_token_to_user_token($user, $identity_token, $user_token, $provider_name);
                    drupal_set_message(t('The @social_network account has been linked to your account.', array(
                      '@social_network' => $data ->user ->identity ->source ->name
                    )), 'status');
                  }
                  //Unlink identity
                  else {
                    oneall_social_login_core_unmap_identity_token($identity_token);
                    drupal_set_message(t('The social network account has been unlinked from your account.'), 'status');
                  }

                  //Clear session
                  oneall_social_login_core_clear_session();

                  //Redirect to profile
                  drupal_goto('user/' . $user ->uid . '/edit');
                }
              }
              //User is not logged in
              else {
                drupal_set_message(t('You must be logged in to perform this action.'), 'error');

                //Clear session
                oneall_social_login_core_clear_session();

                //Redirect to home
                drupal_goto();
              }
            }
          }
          //New user
          else {
            //Check if new users may register
            if (variable_get('user_register', 1)) {
              // Redirect to the registration page, oneall_social_login_core_form_user_register_form_alter prepopulates the fields
              drupal_goto('user/register');
            }
            //Registration disabled
            else {
              drupal_set_message(t('Only site administrators can create new user accounts.'), 'error');
              drupal_goto();
            }
          }
        }
      }
      else {
        watchdog('oneall_social_login_core', 'CURL Error:' . curl_error($curl), WATCHDOG_ERROR);
      }
    }
  }

  //Return to the main page
  drupal_goto();
}


/**
 * Tie the social network account to a new user, after the account has been created
 */
function oneall_social_login_core_user_insert(&$edit, $account, $category) {
  // Check if user has registered by using a social network
  if (isset($_SESSION) AND !empty($_SESSION ['oneall_social_login_session_open']) AND !empty($_SESSION ['oneall_social_login_social_data'])) {
    //Restore data
    $social_data = @unserialize($_SESSION ['oneall_social_login_social_data']);

    //Check format
    if (is_object($social_data) AND property_exists($social_data, 'response') AND is_object($social_data ->response) AND property_exists($social_data ->response, 'result')) {
      //Check status
      if (!empty($social_data ->response ->result ->status ->code) AND $social_data ->response ->result ->status ->code == '200') {
        //Unique user_token
        $user_token = $social_data ->response ->result ->data ->user ->user_token;

        //Unique identity_token
        $identity_token = $social_data ->response ->result ->data ->user ->identity ->identity_token;

        //Social Network used to connect
        $provider_name = $social_data ->response ->result ->data ->user ->identity ->source ->name;

        //Tie user to token
        if (!empty($user_token) AND !empty($identity_token) AND !empty($provider_name)) {
          oneall_social_login_core_map_identity_token_to_user_token($account, $identity_token, $user_token, $provider_name);
        }
      }
    }

    //Clear the session
    oneall_social_login_core_clear_session();
  }
}

/**
 * Tie the social network profile to an existing account when the user logs in
 */
function oneall_social_login_core_user_login(&$edit, $account) {
  //Check if we come from a valid session
  if (isset($_SESSION) AND isset($_SESSION ['oneall_social_login_social_data'])) {
    //Restore data
    $social_data = @unserialize($_SESSION ['oneall_social_login_social_data']);

    //Check format
    if (is_object($social_data) AND property_exists($social_data, 'response') AND is_object($social_data ->response) AND property_exists($social_data ->response, 'result')) {
      //Check status
      if (!empty($social_data ->response ->result ->status ->code) AND $social_data ->response ->result ->status ->code == '200') {
        //Unique user_token
        $user_token = $social_data ->response ->result ->data ->user ->user_token;

        //Unique identity_token
        $identity_token = $social_data ->response ->result ->data ->user ->identity ->identity_token;

        //Social Network used to connect
        $provider_name = $social_data ->response ->result ->data ->user ->identity ->source ->name;

        //Check if already linked
        $uid = oneall_social_login_core_get_uid_for_user_token($user_token);

        //Already linked
        if (is_numeric($uid)) {
          //Linked to a different user
          if ($account ->uid <> $uid) {
            drupal_set_message(t('Your @social_network cannot be linked to this account. Your @social_network account is already linked to another user on this website.', array(
              '@social_network' => $provider
            )), 'error');
          }
        }
        //Not linked
        else {
          //Link to this user
          if (oneall_social_login_core_map_identity_token_to_user_token($account, $identity_token, $user_token, $provider_name)) {
            drupal_set_message(t('Your @social_network account has been linked to your account. You may now use @social_network to login.', array(
              '@social_network' => $provider
            )), 'status');
          }
        }
      }
    }
    else {
      watchdog('oneall_social_login_core', 'Invalid JSON received from resource', WATCHDOG_ERROR);
    }

    //Clear session
    oneall_social_login_core_clear_session();
  }
}


/**
 * Unlink an identity_token from an existing user account
 */
function oneall_social_login_core_unmap_identity_token($identity_token) {
  db_delete('oneall_social_login_identities') ->condition('identity_token', $identity_token) ->execute();
}


/**
 * Link a user_token/identity_token to an existing user account
 */
function oneall_social_login_core_map_identity_token_to_user_token($account, $identity_token, $user_token, $provider_name) {
  // Start transaction
  $db_transaction = db_transaction();

  try {
    // Update authmaps
    user_set_authmaps($account, array(
      'authname_oneall_social_login' => $user_token
    ));

    // Get the new authmap identifier
    $aid = db_select('authmap', 'a') ->fields('a', array(
      'aid'
    )) ->condition('module', 'oneall_social_login', '=') ->condition('authname', $user_token, '=') ->execute() ->fetchField();
    if (is_numeric($aid)) {
      // Remove duplicate identities
      db_delete('oneall_social_login_identities') ->condition('aid', $aid) ->condition('identity_token', $identity_token) ->execute();

      //Add identity
      db_insert('oneall_social_login_identities') ->fields(array(
        'aid' => $aid,
        'identity_token' => $identity_token,
        'provider_name' => $provider_name
      )) ->execute();

      //Done
      return TRUE;
    }
  }
  catch (Exception $e) {
    watchdog_exception('oneall_social_login_core', 'Exception raised: ' . $e);
  }

  //Error
  return FALSE;
}


/**
 * Add information to the the login form
 */
function oneall_social_login_core_form_alter(&$form, &$form_state) {
  //Hook into login page
  if (is_array($form) AND isset($form ['#form_id']) AND $form ['#form_id'] == 'user_login') {
    //Check if we come from a valid session
    if (isset($_SESSION) AND isset($_SESSION ['oneall_social_login_social_data'])) {
      //Restore data
      $social_data = @unserialize($_SESSION ['oneall_social_login_social_data']);

      //Check format
      if (is_object($social_data) AND property_exists($social_data, 'response') AND is_object($social_data ->response) AND property_exists($social_data ->response, 'result')) {
        //Check status
        if (!empty($social_data ->response ->result ->status ->code) AND $social_data ->response ->result ->status ->code == '200') {

          //Read settings
          $settings = oneall_social_login_core_get_settings();

          //Provider
          $provider = $social_data ->response ->result ->data ->user ->identity ->source ->name;

          //Do not show this message if the module is not shown on the registration page
          if (empty($settings ['registration_page_icons']) OR $settings ['registration_page_icons'] <> 'disable') {
            $form ['oneall_social_login_core_create_account'] = array(
              '#type' => 'item',
              '#weight' => -110,
              '#title' => t('I would like to create a new account'),
              '#description' => t('If you do not have an account on this website yet, <a href="@link_register">create a new account</a> to link your @social_network account to this account.', array(
                '@social_network' => $provider,
                '@link_register' => url('user/register')
              ))
            );
          }
          //Tell the user what is going on
          $form ['oneall_social_login_core_link_account'] = array(
            '#type' => 'item',
            '#weight' => -100,
            '#title' => t('I already have an account'),
            '#description' => t('If you have already an account on this website, login below to link your @social_network to this account.', array(
              '@social_network' => $provider
            ))
          );
        }
      }
    }
  }
}


/**
 * Prepopluate the registration form with values
 */
function oneall_social_login_core_form_user_register_form_alter(&$form, &$form_state) {
  //Check if we come from a valid session
  if (isset($_SESSION) AND isset($_SESSION ['oneall_social_login_social_data'])) {
    //Restore data
    $social_data = @unserialize($_SESSION ['oneall_social_login_social_data']);

    //Check format
    if (is_object($social_data) AND property_exists($social_data, 'response') AND is_object($social_data ->response) AND property_exists($social_data ->response, 'result')) {
      //Check status
      if (!empty($social_data ->response ->result ->status ->code) AND $social_data ->response ->result ->status ->code == '200') {

        //Read settings
        $settings = oneall_social_login_core_get_settings();

        //Data
        $data = $social_data ->response ->result ->data;
        $identity = $data ->user ->identity;
        $identity_id = $identity ->id;
        $provider = $identity ->source ->name;

        //Email
        $user_email = '';
        $user_email_is_verified = FALSE;
        if (property_exists($identity, 'emails') AND is_array($identity ->emails)) {
          while (!$user_email_is_verified AND (list(, $email) = each($identity ->emails))) {
            $user_email = $email ->value;
            $user_email_is_verified = ($email ->is_verified == '1');
          }
        }

        //Login
        $user_login = '';
        if (!empty($identity ->preferredUsername)) {
          $user_login = $identity ->preferredUsername;
        }
        elseif (!empty($identity ->displayName)) {
          $user_login = $identity ->displayName;
        }
        elseif (!empty($identity ->name ->formatted)) {
          $user_login = $identity ->name ->formatted;
        }
        elseif (!empty($identity ->name ->displayName)) {
          $user_login = $identity ->name ->displayName;
        }

        //Prepopulate
        $form ['account'] ['name'] ['#default_value'] = $user_login;
        $form ['account'] ['mail'] ['#default_value'] = $user_email;

        //Do not show this message if the module is not shown on the registration page
        if (empty($settings ['login_page_icons']) OR $settings ['login_page_icons'] <> 'disable') {
          $form ['oneall_social_login_core_link_account'] = array(
            '#type' => 'item',
            '#weight' => -100,
            '#title' => t('I already have an account'),
            '#description' => t('If you have already an account on this website, <a href="@link_login">log in</a> to link your @social_network to the existing account.', array(
              '@social_network' => $provider,
              '@link_login' => url('user')
            ))
          );
        }

        //Tell the user what is going on
        $form ['oneall_social_login_core_create_account'] = array(
          '#type' => 'item',
          '#weight' => -100,
          '#title' => t('I would like to create a new account'),
          '#description' => t('Please fill out the form below. Your @social_network account will be linked to the new account and you can then use @social_network to log in.', array(
            '@social_network' => $provider
          ))
        );
      }
    }
  }
}


/**
 * Remove the session data
 */
function oneall_social_login_core_clear_session() {
  foreach (array(
    'session_open',
    'session_time',
    'social_data'
  ) AS $key) {
    $key = 'oneall_social_login_' . $key;
    if (isset($_SESSION [$key])) {
      unset($_SESSION [$key]);
    }
  }
}


/**
 * Return the user for a user_token
 */
function oneall_social_login_core_get_user_for_user_token($user_token) {
  $uid = oneall_social_login_core_get_uid_for_user_token($user_token);
  if (is_numeric($uid)) {
    if (($user = user_load($uid, FALSE)) !== FALSE) {
      return $user;
    }
  }
  return FALSE;
}


/**
 * Return the uid for a user_token
 */
function oneall_social_login_core_get_uid_for_user_token($user_token) {
  $uid = db_query("SELECT uid FROM {authmap} WHERE module = :module AND authname = :authname", array(
    ':module' => 'oneall_social_login',
    ':authname' => $user_token
  )) ->fetchField();
  return (is_numeric($uid) ? $uid : FALSE);
}


/**
 * Return the user_token for a uid
 */
function oneall_social_login_core_get_user_token_for_uid($uid) {
  $user_token = db_query("SELECT authname FROM {authmap} WHERE module = :module AND uid = :uid", array(
    ':module' => 'oneall_social_login',
    ':uid' => $uid
  )) ->fetchField();
  return (!empty($user_token) ? $user_token : FALSE);
}


/**
 * Return the settings
 */
function oneall_social_login_core_get_settings() {
  //Container
  $settings = array();
  $settings ['enabled_providers'] = array();

  //Read settings
  $results = db_query("SELECT setting, value FROM {oneall_social_login_settings}");
  foreach ($results as $result) {
    $settings [$result ->setting] = $result ->value;
    if (drupal_substr($result ->setting, 0, 8) == 'provider' AND !empty($result ->value)) {
      $settings ['enabled_providers'] [] = drupal_substr($result ->setting, 9, drupal_strlen($result ->setting));
    }
  }

  //Done
  return $settings;
}


/**
 * Add a Link to the footer
 */
function oneall_social_login_core_preprocess_page(&$vars, $hook) {
  if (is_array($vars ['page']) AND isset($vars ['page']) AND isset($vars ['page'] ['footer'])) {
    $vars ['page'] ['footer'] ['system_powered-by'] ['#markup'] .= '&nbsp; | &nbsp;' . t('<a href="@link_social_login">Social Login</a> powered by <a href="@link_oneall">OneAll</a>', array(
      '@link_social_login' => 'http://www.oneall.com/services/single-sign-on/',
      '@link_oneall' => 'http://www.oneall.com'
    ));
  }
}
